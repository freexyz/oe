
================================================================================
OpenEmbedded's Software Requirements
================================================================================
sudo apt-get install python			for Python 
sudo apt-get install python-dev			for Python Development tools 
sudo apt-get install python-psyco		for Psyco 
sudo apt-get install python-subunit
sudo apt-get install perl			for Perl
sudo apt-get install ccache			for ccache 
sudo apt-get install patch			for patch 
sudo apt-get install diffstat			for diffstat
sudo apt-get install build-essential		for build-essential
sudo apt-get install m4				for m4 
sudo apt-get install make			for Make

sudo apt-get install wget			for wget
sudo apt-get install curl			for 
sudo apt-get install ftp			for ftp
sudo apt-get install cvs			for CVS
sudo apt-get install cvsps 
sudo apt-get install subversion			for Subversion
sudo apt-get install git-core			for Git
sudo apt-get install git-gui
sudo apt-get install git-doc
sudo apt-get install git-svn
sudo apt-get install git-cvs
sudo apt-get install gitweb
sudo apt-get install git-daemon-run
sudo apt-get install git-email
sudo apt-get install git-arch 
sudo apt-get install gitk
sudo apt-get install ssh
sudo apt-get install cvs2svn
sudo apt-get install bzr
sudo apt-get install bzr-gtk
sudo apt-get install bzr-svn
sudo apt-get install python-kerberos
sudo apt-get install bzr-doc
sudo apt-get install librsvg2-bin

sudo apt-get install md5deep

sudo apt-get install tar
sudo apt-get install bzip2
sudo apt-get install gzip
sudo apt-get install unzip 

sudo apt-get install jade			for Jade or OpenJade
sudo apt-get install docbook			for DTDs and DSSSL stylesheets
sudo apt-get install sgmltools-lite		for sgmltools-lite
sudo apt-get install docbook-utils
sudo apt-get install texinfo			for Texinfo
sudo apt-get install texi2html			for texi2html
 
sudo apt-get install sed			for GNU sed 
sudo apt-get install bison			for Bison
sudo apt-get install bc				for bc (binary calculator)
sudo apt-get install libc6-dev			for glibc headers
sudo apt-get install libpcre3-dev		(Perl 5 Compatible Regular Expression Library, required for e.g. konqueror-embedded)
sudo apt-get install libsdl1.2-dev		for SDL headers to build qemu-native
sudo apt-get install quilt			for multiple patches 
sudo apt-get install mktemp			(required by quilt and used in some package patches)
sudo apt-get install help2man

sudo apt-get install gawk
sudo apt-get install coreutils
sudo apt-get install libasound2-doc
sudo apt-get install libglib2.0-doc
sudo apt-get install libgtk2.0-doc

sudo apt-get install chrpath

sudo apt-get install libreadline-dev
sudo apt-get install libboost-dev		(all packages starting with libboost).


================================================================================
OpenEmbedded's local.conf file
================================================================================
# Use this to specify where BitBake should place the downloaded sources into
DL_DIR = "${OEBASE}/sources"

# Delete the line below. Then specify which .bb files to consider for
# your build. Typically this will be something like BBFILES = "/path/to/openembedded/recipes/*/*.bb"
BBFILES := "${OEBASE}/openembedded/recipes/*/*.bb"

# Use the BBMASK below to instruct BitBake to _NOT_ consider some .bb files
# This is a regulary expression, so be sure to get your parenthesis balanced.
#BBMASK = ""

# Uncomment this if you want to use a prebuilt toolchain. You will need to
# provide packages for toolchain and additional libraries yourself. You also
# have to set PATH in your environment to make sure BitBake finds additional binaries.
# ASSUME_PROVIDED += "virtual/${TARGET_PREFIX}gcc virtual/libc"

# Uncomment this if you are building Linux 2.4 Embedix kernels.
# i.e. openzaurus-sa-2.4.18 and openzaurus-pxa-2.4.18 - and don't forget
# to rename the binaries as instructed in the Wiki.
# Most users do not need this anymore thankfully!
# ASSUME_PROVIDED += "virtual/arm-linux-gcc-2.95"

# Select between multiple alternative providers, if more than one is eligible.
PREFERRED_PROVIDERS = "virtual/qte:qte virtual/libqpe:libqpe-opie"
PREFERRED_PROVIDERS += " virtual/libsdl:libsdl-x11"
PREFERRED_PROVIDERS += " virtual/${TARGET_PREFIX}gcc-initial:gcc-cross-initial"
PREFERRED_PROVIDERS += " virtual/${TARGET_PREFIX}gcc-intermediate:gcc-cross-intermediate"
PREFERRED_PROVIDERS += " virtual/${TARGET_PREFIX}gcc:gcc-cross"
PREFERRED_PROVIDERS += " virtual/${TARGET_PREFIX}g++:gcc-cross"

# Uncomment this to specify where BitBake should create its temporary files.
# Note that a full build of everything in OpenEmbedded will take GigaBytes of hard
# disk space, so make sure to free enough space. The default TMPDIR is
# <build directory>/tmp
# Don't use symlinks in in the path to avoid problems
# TMPDIR = /usr/local/projects/oetmp

# Uncomment this to specify a machine to build for. See the conf directory
# for machines currently known to OpenEmbedded. This will automatically take care
# of TARGET_ARCH
MACHINE = "om-gta01"

# Use this to specify the target architecture. Note that this is only
# needed when building for a machine not known to OpenEmbedded. Better use
# the MACHINE attribute (see above)
TARGET_ARCH = "arm"

# Use this to specify the target operating system.  The default is "linux",
# for a normal linux system with glibc. Set this to "linux-uclibc" if you want
# to build a uclibc based system.
# Normally the DISTRO of your choosing will take care of this 
TARGET_OS = "linux"
# TARGET_OS = "linux-uclibc"

# Uncomment this to select a distribution policy. See the conf directory
# for distributions currently known to OpenEmbedded.
# Although it no longer contain version number in the (file-)name
# openzaurus-unstable is a so called "versioned"  distro, i.e. they 
# explicitely select specific versions of various packages.
# Stay away from unversioned distros unless you really know what you are doing
DISTRO = "angstrom-2008.1"

# So far, angstrom.conf sets ENABLE_BINARY_LOCALE_GENERATION
# to generate binary locale packages at build time using qemu-native and
# thereby guarantee i18n support on all devices. If your build breaks on 
# qemu-native consider disabling ENABLE_BINARY_LOCALE_GENERATION (note that
# this breaks i18n on devices with less than 128MB RAM) or installing
# a working third-party qemu (e.g. provided by your distribution) and
# adding qemu-native to ASSUME_PROVIDED. Caveat emptor, since third-party
# qemus lack patches needed to work with various OE targets.
# ENABLE_BINARY_LOCALE_GENERATION = "0"
# ASSUME_PROVIDED += "qemu-native"

# If ENABLE_BINARY_LOCALE_GENERATION is set to "1", you can limit locales
# generated to the list provided by GLIBC_GENERATE_LOCALES. This is huge
# time-savior for developmental builds. Format: list of locale.encoding pairs
# with spaces as separators.
# GLIBC_GENERATE_LOCALES = "en_US.UTF-8 en_GB.UTF-8 de_DE.UTF-8"

# Uncomment this to select a particular major kernel version if the MACHINE setting
# supports more than one major kernel version. Currently this is suported by the
# following MACHINE types: poodle, tosa and simpad.
MACHINE_KERNEL_VERSION = "2.6"

# Uncomment one of these to build packages during the build process.
# This is done automatically if you set DISTRO (see above)
# INHERIT = "package_ipk"
# INHERIT = "package_tar"

# Add the required image file system types below. Valid are 
# jffs2, tar(.gz|bz2), cpio(.gz), cramfs, ext2(.gz), ext3(.gz)
# squashfs, squashfs-lzma
IMAGE_FSTYPES = "jffs2 tar"

# Uncomment this if you want to keep the temporary rootfs
# diretory, this can be useful during development.
# (Note that this rootfs is NOT usuable as NFS export.)
# IMAGE_KEEPROOTFS = "1"

# Uncomment this to disable the parse cache (not recommended).
# CACHE = ""

# Uncomment this if you want BitBake to emit debugging output
BBDEBUG = "yes"

# Use DEBUG_BUILD to build packages with DEBUG_OPTIMIZATION instead of
# FULL_OPTIMIZATION.
#
# DEBUG_BUILD = "1"

# If you want to have unstripped ready-to-debug binaries, set this to "no",
# although for debugging you can use automatically produced -dbg packages.
# If you need to have completely undebuggable builds, set this to "full",
# by default gnu.debuglink section is left in the binaries after stripping, so
# this might be useful if you want to have checksum-level binary consistency
# across successive builds.
# PACKAGE_STRIP = "no"

# Uncomment these to build a package such that you can use gprof to profile it.
# NOTE: This will only work with 'linux' targets, not
# 'linux-uclibc', as uClibc doesn't provide the necessary
# object files.  Also, don't build glibc itself with these
# flags, or it'll fail to build.
#
# PROFILE_OPTIMIZATION = "-pg"
# SELECTED_OPTIMIZATION = "${PROFILE_OPTIMIZATION}"
# LDFLAGS =+ "-pg"

# Uncomment this to enable parallel make.
# This allows make to spawn mutliple processes to take advantage of multiple 
# processors. Useful on SMP machines. This may break some packages - we're
# in the process of marking these so let us know if you find any.
# PARALLEL_MAKE = "-j 4"

# Uncomment to run multiple bitbake threads in parallel.
# Bitbake can do multiple jobs in parallel: Its a good idea make use of 
# all available resources: e.g. to download sources while some other
# piece of software is compiled.
# BB_NUMBER_THREADS = "2"

# Uncomment this if you want BitBake to emit the log if a build fails.
BBINCLUDELOGS = "yes"

# Specifies a location to search for pre-generated tarballs when fetching
# a cvs:// URI. Outcomment this, if you always want to pull directly from CVS.
#CVS_TARBALL_STASH = ""

# Uncomment this if you want to install shared libraries directly under their SONAME,
# rather than installing as the full version and symlinking to the SONAME.
# PACKAGE_SNAP_LIB_SYMLINKS = "1"

# EDIT THIS FILE and then remove the line below before using!
# REMOVE_THIS_LINE:="${@bb.fatal('Read the comments in your conf/local.conf')}"


================================================================================
OpenEmbedded's shell
================================================================================
sudo dpkg-reconfigure dash











